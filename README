                    ░       ░░░       ░░░  ░░░░  ░░  ░░░░  ░
                    ▒  ▒▒▒▒  ▒▒  ▒▒▒▒  ▒▒  ▒▒▒▒  ▒▒▒  ▒▒  ▒▒
                    ▓  ▓▓▓▓  ▓▓  ▓▓▓▓  ▓▓        ▓▓▓▓    ▓▓▓
                    █  ████  ██  ████  ██  ████  ███  ██  ██
                    █       ███       ███  ████  ██  ████  █

+------------------------------------------------------------------------------+
        hex   0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f                   
          0  4d 5a 90 00 03 00 00 00 04 00 00 00 ff ff 00 00  MZ..............  
         10  b8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00  ........@.......  
         20  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................  
         30  00 00 00 00 00 00 00 00 00 00 00 00 f0 00 00 00  ................  
         40  0e 1f ba 0e 00 b4 09 cd 21 b8 01 4c cd 21 54 68  ........!..L.!Th  
         50  69 73 20 70 72 6f 67 72 61 6d 20 63 61 6e 6e 6f  is program canno  
         60  74 20 62 65 20 72 75 6e 20 69 6e 20 44 4f 53 20  t be run in DOS   
         70  6d 6f 64 65 2e 0d 0d 0a 24 00 00 00 00 00 00 00  mode....$.......  
         80  41 b8 1d c5 05 d9 73 96 05 d9 73 96 05 d9 73 96  A.....s...s...s.  
         90  11 b2 77 97 09 d9 73 96 11 b2 70 97 03 d9 73 96  ..w...s...p...s.  
         a0  11 b2 76 97 c4 d9 73 96 11 b2 72 97 02 d9 73 96  ..v...s...r...s.  
         b0  05 d9 72 96 ad d9 73 96 63 b6 8e 96 0d d9 73 96  ..r...s.c.....s.  
         c0  57 ac 77 97 14 d9 73 96 57 ac 70 97 0f d9 73 96  W.w...s.W.p...s.  
         d0  57 ac 76 97 2c d9 73 96 05 d9 73 96 e0 df 73 96  W.v.,.s...s...s.  
         e0  ca ac 71 97 04 d9 73 96 52 69 63 68 05 d9 73 96  ..q...s.Rich..s.  
         f0  50 45 00 00 64 86 0d 00 02 7c bc 68 00 00 00 00  PE..d....|.h....  
        100  00 00 00 00 f0 00 22 00 0b 02 0e 1d 00 c8 21 00  ......".......!.  
        110  00 9e 0b 00 00 00 00 00 e2 7d 00 00 00 10 00 00  .........}......  
        120  00 00 00 40 01 00 00 00 00 10 00 00 00 02 00 00  ...@............  
        130  06 00 00 00 00 00 00 00 06 00 00 00 00 00 00 00  ................  
        140  00 e0 2d 00 00 04 00 00 00 00 00 00 03 00 60 81  ..-...........`.  
        150  00 00 10 00 00 00 00 00 00 10 00 00 00 00 00 00  ................  
        160  00 00 10 00 00 00 00 00 00 10 00 00 00 00 00 00  ................  
  OVR |  x8 |    ascii |       6c
+------------------------------------------------------------------------------+

ddhx is a multi-platform Text UI hex editor, inspired by GNU nano and vim.

Currently available for Windows, macOS, Linux, and BSDs.

License: MIT
Title font: Shaded Blocky (FIGlet)

// FEATURES

  • Insert, overwrite, and delete operations
  • Unlimited undo/redo
  • Large file support
  • Visual selection and block operations
  • Multiple charset representations (ascii, mac, cp437, ebcdic)
  • Search data with a powerful pattern syntax
  • Skip identical data or repeating patterns by selection
  • Customizable with configuration file

////////////////////////////////////////////////////////////////////////////////
// Limitations

// Output

It currently only outputing UTF-8. You might want to stick to the ASCII charset
if your terminal/console lacks UTF-8 capabilities. On Windows, the editor will
attempt to use the 65001 (UTF-8) codepage automatically.

// Input

On POSIX platforms, the editor supports xterm and vt220 sequences.

The app assumes these keys:
- ^H (\010) for Ctrl+Backspace;
- DEL (0x7f) for Backspace;
- "\033[3~" for Delete.

Not all key combinations can be detected by terminal applications. Your 
terminal emulator or framebuffer may intercept certain shortcuts for its own
features. For example, VTE-based terminals (GNOME Terminal, Terminator, Tilix)
often capture Ctrl+Shift+Arrow keys for tab/pane navigation. Most framebuffers
will capture Shift+PageUp for scrolling the buffer upward.

If a shortcut doesn't work, the "bind" command allows binding a command to a
shortcut: `bind alt+e select-end`. Commands can still be executed from the
command prompt.

////////////////////////////////////////////////////////////////////////////////
// Roadmap

This list may change at any given time without notice.

0.5: Released!
- [x] Overwrite data
- [x] Append data
- [x] Save new buffer to file
- [x] Save existing file
- [x] History undo/redo
- [x] Command prompt
- [x] Standard input (stdin) support as new buffer
- [x] Skip to different element (or byte) (Ctrl+Left/Right)

0.6: Released!
- [x] Support selecting data
- [x] Config file
- [x] "bind" command: map command to shortcut
- [x] Searching ("find" command)

0.7: WIP
- [x] Insert data
- [x] Delete data
- [x] "export-range" command
- [x] Insert/replace using file
- [x] Insert/replace using pattern

Wishlist:
- [ ] Other single-byte data types in view (d8, o8)
- [ ] Multi-byte data types (d16, f32, etc.)
- [ ] Insert characters
- [ ] Copy & paste ("paste" depends on mode)
- [ ] Bookmarks / Annotations ("bookmark-save", "bookmark-load")
- [ ] Process memory document type
- [ ] Disk document type
- [ ] Search by charset
- [ ] Inspect data panel
- [ ] Patch system

////////////////////////////////////////////////////////////////////////////////
// Usage

ddhx aims to be a small and easy-to-use visual hexadecimal editor. For that
purpose, there are multiple ways of using the editor.

Synopsis:
  ddhx [OPTIONS] [FILE|-]
  ddhx {-h|--help|--version|--ver}

To view available start options, execute `ddhx --help`. The command-line
interface matches POSIX guidelines.

Create a new empty document:
  $ ddhx
Open an existing or create a new file at this location:
  $ ddhx FILENAME
Create a new document from stream data:
  $ echo test | ddhx -

To quit the editor, use Ctrl+Q, or use the "quit" command.

Minimum recommended terminal size is 80x24 characters.

////////////////////////////////////////////////////////////////////////////////
// Navigation

Left/Right Arrow Keys   Move cursor by one element
Up/Down Arrow Keys      Move cursor by a row
Page Up/Down            Move cursor across the screen
Home/End                Move cursor to start or end of line
Ctrl+Home/End           Move cursor to start of end of document
Ctrl+Left/Right         Skip over repeated bytes or patterns
Ctrl+Up/Down            Scroll view without moving cursor
Shift+Navigation        Extend selection while navigating

To view all default keybindings, run: ddhx --help-keys

////////////////////////////////////////////////////////////////////////////////
// Editing

a-f, 0-9                Insert or replace data at cursor position
Tab                     Change between data and text columns
Ctrl+S                  Save document
Ctrl+O                  Save As another name

////////////////////////////////////////////////////////////////////////////////
// Key binding

Keys can be bound to commands using the "bind" command.

Usage: bind KEY COMMAND [PARAMS...]

Vim-style navigation example:
  >bind h left
  >bind j down
  >bind k up
  >bind l right

Custom jump example:
  >bind right-arrow goto +32

This makes the right arrow jump 32 bytes ahead instead of moving one position.

To remove bindings:
  >unbind right-arrow       Remove a specific binding
  >reset-keys               Reset all bindings to defaults

Key bounds in a session are not saved. The configuration file is recommended.

////////////////////////////////////////////////////////////////////////////////
// Searching

Finding data uses the "find" (Ctrl+F) and "find-back" (Ctrl+B) commands.

Once a search needle is define, it can be re-used using "find-next" (Ctrl+N)
and "find-prev" (Shift+N).

For example, looking for `hi\0\0` (these are equivalent):
  >find s:hi x:00 00
  >find \"hi\" 0x00 00
  >find x:68 69 00 00

Supported prefixes:
  x: and 0x - Hexadecimal (currently only 8-bit unsigned)
  d:        - Decimal (currently only 8-bit unsigned)
  o:        - Octal (currently only 8-bit unsigned)
  s: and "  - String (currently ASCII only)

Practical example: PDF

Use the "find s:endstream" comand to search for string "endstream", then hit
Ctrl+N ("find-next") to go to next result or Shift+N ("find-prev") to go to
the previous result.

LIMITATION: Search does not wrap and depends on cursor position.

////////////////////////////////////////////////////////////////////////////////
// Commands

All actions in the editor are backed by commands. Commands can be executed via
keyboard shortcuts or by typing them directly into the command prompt.

Press Enter to open the command prompt, type your command, then press Enter
again to execute it.

// Command Arguments

Commands may require arguments. If you omit them, the editor will prompt you
for the missing values.

Example - jumping forward 32 bytes:
  >goto +0x20

Typing "goto" alone will prompt for an offset. This command can also be
triggered with Ctrl+G and accepts decimal, octal, and hexadecimal values.

// Using "goto"

  >goto 0x10        Jump to position 16 (hexadecimal)
  >goto +020        Jump forward 16 bytes (octal)
  >goto -5          Jump backward 5 bytes (decimal)
  >goto %45         Jump to 45% through the document

To view all available commands, run: ddhx --help-commands

////////////////////////////////////////////////////////////////////////////////
// Configuration

Settings can be changed at runtime using the "set" command.

Example - changing the character set:
  >set charset mac

Most settings can also be configured via command-line flags. For example, both
"-c" and "--columns=" correspond to the "columns" setting.

Runtime changes do not persist across sessions. To make settings permanent,
add them to your configuration file at. (Use `ddhx --config-path` to see
your system's location.)

Example configuration file:
  charset mac
  columns 32

To view configuration options, run: ddhx --help-config

////////////////////////////////////////////////////////////////////////////////
// Compiling

To compile this project, you'll need a D compiler and DUB.

All major compilers are supported (DMD, GDC, and LDC). LDC, GDC, and DUB are
typically available in package repositories as gdc/gdc-*/gcc-gdc, ldc2, and
dub.

Compile a debug build:
  $ dub build
Compile a release build using a specified compiler:
  $ dub build -b release --compiler=ldc2

////////////////////////////////////////////////////////////////////////////////
// Debugging

Since things might break, there are unit testing and logging facilities.

Run unit tests (useful for new platforms):
  $ dub test
Run unit tests with log traces:
  $ dub test --d-version=Trace

Environment variables:
- DDHX_LOG=PATH
  - If set, start logging to PATH.
- DDHX_BACKEND=BACKEND
  - If set, forces BACKEND to be selected, if it exists.
  - Backends: "piece" (default), "chunk" (older, deprecated)
- DDHX_CHUNKSIZE=SIZE
  - If set, sets chunk size to SIZE (binary suffix) for the chunk backend.

********************************************************************************
*                                    NOTICE                                    *
********************************************************************************

This software is provided with NO WARRANTY as it is marked as EXPERIMENTAL.

ALWAYS make backups of your files before editing them.

This is a Work In Progress (WIP). Everything was rewritten from scratch
in version 0.5 to have editing features. It will be buggy!
